import type { NextApiRequest, NextApiResponse } from 'next';
import dbConnect from '../../../lib/dbConnect';
import axios, { AxiosResponse } from 'axios';
import { resolve } from 'path';
const Members = require('../../../lib/models/member');
const constants = require('gocardless-nodejs/constants');
const gocardless = require('gocardless-nodejs');
const client = gocardless(
  process.env.GO_CARDLESS_ACCESS_TOKEN,
  constants.Environments.Sandbox,
);

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse,
) {
  await dbConnect();
  if (!req.body.data) {
    res.status(400).json({ message: 'Incorrect data sent to server ' });
    return;
  }

  const gcFlow = async () => {
    const { id } = await client.billingRequests.create({
      mandate_request: {
        scheme: 'bacs',
      },
    });
    // add prefilled  customer detail to the direct debit form
    await client.billingRequestFlows
      .create({
        //TODO add hashed email to url
        redirect_uri: 'http://localhost:3000',
        exit_uri: 'https://my-company.com/exit',
        prefilled_customer: {
          given_name: req.body.data.firstName,
          family_name: req.body.data.lastName,
          address_line1: req.body.data.streetAddress,
          city: req.body.data.townOrCity,
          region: req.body.data.county,
          postal_code: req.body.data.postCode,
          email: req.body.data.email,
        },
        //  id generated by the GC aip
        links: {
          billing_request: id,
        },
      })
      .then((response: any) => {
        res.status(200).json(response);
      });
  };

  // const {
  //   firstName,
  //   lastName,
  //   streetAddress,
  //   townOrCity,
  //   county,
  //   postCode,
  //   email,
  // } = req.body.data;
  // add new potential member to db
  await Members.create({
    first_name: req.body.data.firstName,
    last_name: req.body.data.lastName,
    email: req.body.data.email,
    post_code: req.body.data.postCode,
    phone_number: req.body.data.phoneNumber,
    street_address: req.body.data.streetAddress,
    town_city: req.body.data.townOrCity,
    county: req.body.data.county,
    age_confirm: req.body.data.ageConfirm,
    home_choir: req.body.data.homeChoir,
    consent: req.body.data.consent,
    active_mandate: false,
    mandate: '',
    membership_type: 'DD',
    go_cardless_id: '',
  })
    .then((response: { _id: string }) => {
      if (response._id) {
      return gcFlow();
      }
    })
    .catch((err: any) => {
      let message = 'There seems to be a problem, please give us a call ';
      if (err.code === 11000) {
        message = 'An account with that email already exists';
      }
      res.status(400).json({ message });
    });
  //  if the response has the _id property we know it has been added to the db

  // create a billing request returns a request id string
	return resolve()
}
